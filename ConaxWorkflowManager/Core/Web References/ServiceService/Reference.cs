//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1008.
// 
#pragma warning disable 1591

namespace MPS.MPP.Auxiliary.ConaxWorkflowManager.Core.ServiceService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceServiceSoap", Namespace="http://tempuri.org/")]
    public partial class ServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetServiceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceViewForServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllPricesForServicesWithIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceViewForEncryptedServiceidOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceViewForIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServicesForServiceProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServicesForServiceProvider2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServicesIncludedInContentAgreementOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServiceViewElementOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServiceViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceForIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceForId2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceForObjectIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPurchaseInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPurchaseStatInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContentUsageStatInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRegionForIpOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllLanguagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRegionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRegionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRegionOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteRegionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllRegionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSingleContentServicePriceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSingleContentServicePrice2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ExcludeContentFromServicePriceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateServicePriceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServicePriceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteServicePriceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCategoryInfoWithAllContentAndChannelsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceCategoryInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContentForServiceAgreementOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContentAndServiceForCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchContentForServiceAgreementOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMultipleServicePriceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMultipleServicePriceByPriceIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceAgreementInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ServiceNameExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEventsFromSinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEventsOfTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePurchaseValidityTimeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ServiceService() {
            this.Url = global::MPS.MPP.Auxiliary.ConaxWorkflowManager.Core.Properties.Settings.Default.MPS_MPP_Auxiliary_ConaxWorkflowManager_Core_ServiceService_ServiceService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetServiceInfoCompletedEventHandler GetServiceInfoCompleted;
        
        /// <remarks/>
        public event GetServiceViewForServiceCompletedEventHandler GetServiceViewForServiceCompleted;
        
        /// <remarks/>
        public event GetAllPricesForServicesWithIdCompletedEventHandler GetAllPricesForServicesWithIdCompleted;
        
        /// <remarks/>
        public event GetServiceViewForEncryptedServiceidCompletedEventHandler GetServiceViewForEncryptedServiceidCompleted;
        
        /// <remarks/>
        public event GetServiceViewForIdCompletedEventHandler GetServiceViewForIdCompleted;
        
        /// <remarks/>
        public event GetServicesForServiceProviderCompletedEventHandler GetServicesForServiceProviderCompleted;
        
        /// <remarks/>
        public event GetServicesForServiceProvider2CompletedEventHandler GetServicesForServiceProvider2Completed;
        
        /// <remarks/>
        public event GetServicesIncludedInContentAgreementCompletedEventHandler GetServicesIncludedInContentAgreementCompleted;
        
        /// <remarks/>
        public event UpdateServiceViewElementCompletedEventHandler UpdateServiceViewElementCompleted;
        
        /// <remarks/>
        public event UpdateServiceViewCompletedEventHandler UpdateServiceViewCompleted;
        
        /// <remarks/>
        public event UpdateServiceCompletedEventHandler UpdateServiceCompleted;
        
        /// <remarks/>
        public event GetServiceForIdCompletedEventHandler GetServiceForIdCompleted;
        
        /// <remarks/>
        public event GetServiceForId2CompletedEventHandler GetServiceForId2Completed;
        
        /// <remarks/>
        public event GetServiceForObjectIdCompletedEventHandler GetServiceForObjectIdCompleted;
        
        /// <remarks/>
        public event GetPurchaseInfoCompletedEventHandler GetPurchaseInfoCompleted;
        
        /// <remarks/>
        public event GetPurchaseStatInfoCompletedEventHandler GetPurchaseStatInfoCompleted;
        
        /// <remarks/>
        public event GetContentUsageStatInfoCompletedEventHandler GetContentUsageStatInfoCompleted;
        
        /// <remarks/>
        public event GetRegionForIpCompletedEventHandler GetRegionForIpCompleted;
        
        /// <remarks/>
        public event GetAllLanguagesCompletedEventHandler GetAllLanguagesCompleted;
        
        /// <remarks/>
        public event AddRegionCompletedEventHandler AddRegionCompleted;
        
        /// <remarks/>
        public event UpdateRegionCompletedEventHandler UpdateRegionCompleted;
        
        /// <remarks/>
        public event GetRegionCompletedEventHandler GetRegionCompleted;
        
        /// <remarks/>
        public event DeleteRegionCompletedEventHandler DeleteRegionCompleted;
        
        /// <remarks/>
        public event GetAllRegionsCompletedEventHandler GetAllRegionsCompleted;
        
        /// <remarks/>
        public event SetSingleContentServicePriceCompletedEventHandler SetSingleContentServicePriceCompleted;
        
        /// <remarks/>
        public event SetSingleContentServicePrice2CompletedEventHandler SetSingleContentServicePrice2Completed;
        
        /// <remarks/>
        public event ExcludeContentFromServicePriceCompletedEventHandler ExcludeContentFromServicePriceCompleted;
        
        /// <remarks/>
        public event CreateServicePriceCompletedEventHandler CreateServicePriceCompleted;
        
        /// <remarks/>
        public event UpdateServicePriceCompletedEventHandler UpdateServicePriceCompleted;
        
        /// <remarks/>
        public event DeleteServicePriceCompletedEventHandler DeleteServicePriceCompleted;
        
        /// <remarks/>
        public event GetCategoryInfoWithAllContentAndChannelsCompletedEventHandler GetCategoryInfoWithAllContentAndChannelsCompleted;
        
        /// <remarks/>
        public event GetServiceCategoryInfoCompletedEventHandler GetServiceCategoryInfoCompleted;
        
        /// <remarks/>
        public event GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigCompletedEventHandler GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigCompleted;
        
        /// <remarks/>
        public event GetContentForServiceAgreementCompletedEventHandler GetContentForServiceAgreementCompleted;
        
        /// <remarks/>
        public event GetContentAndServiceForCategoryCompletedEventHandler GetContentAndServiceForCategoryCompleted;
        
        /// <remarks/>
        public event SearchContentForServiceAgreementCompletedEventHandler SearchContentForServiceAgreementCompleted;
        
        /// <remarks/>
        public event GetMultipleServicePriceCompletedEventHandler GetMultipleServicePriceCompleted;
        
        /// <remarks/>
        public event GetMultipleServicePriceByPriceIDCompletedEventHandler GetMultipleServicePriceByPriceIDCompleted;
        
        /// <remarks/>
        public event GetServiceAgreementInfoCompletedEventHandler GetServiceAgreementInfoCompleted;
        
        /// <remarks/>
        public event ServiceNameExistsCompletedEventHandler ServiceNameExistsCompleted;
        
        /// <remarks/>
        public event GetEventsFromSinkCompletedEventHandler GetEventsFromSinkCompleted;
        
        /// <remarks/>
        public event GetEventsOfTypeCompletedEventHandler GetEventsOfTypeCompleted;
        
        /// <remarks/>
        public event UpdatePurchaseValidityTimeCompletedEventHandler UpdatePurchaseValidityTimeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServiceInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceInfo(string accountId, string serviceSearchParameters, string subscriberContextXML, string labelTextName, string descriptionTextName, string logoImageName) {
            object[] results = this.Invoke("GetServiceInfo", new object[] {
                        accountId,
                        serviceSearchParameters,
                        subscriberContextXML,
                        labelTextName,
                        descriptionTextName,
                        logoImageName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceInfoAsync(string accountId, string serviceSearchParameters, string subscriberContextXML, string labelTextName, string descriptionTextName, string logoImageName) {
            this.GetServiceInfoAsync(accountId, serviceSearchParameters, subscriberContextXML, labelTextName, descriptionTextName, logoImageName, null);
        }
        
        /// <remarks/>
        public void GetServiceInfoAsync(string accountId, string serviceSearchParameters, string subscriberContextXML, string labelTextName, string descriptionTextName, string logoImageName, object userState) {
            if ((this.GetServiceInfoOperationCompleted == null)) {
                this.GetServiceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceInfoOperationCompleted);
            }
            this.InvokeAsync("GetServiceInfo", new object[] {
                        accountId,
                        serviceSearchParameters,
                        subscriberContextXML,
                        labelTextName,
                        descriptionTextName,
                        logoImageName}, this.GetServiceInfoOperationCompleted, userState);
        }
        
        private void OnGetServiceInfoOperationCompleted(object arg) {
            if ((this.GetServiceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceInfoCompleted(this, new GetServiceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServiceViewForService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceViewForService(string accountId, string serviceName, string subscriberContextXML, bool includeContentInfo) {
            object[] results = this.Invoke("GetServiceViewForService", new object[] {
                        accountId,
                        serviceName,
                        subscriberContextXML,
                        includeContentInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceViewForServiceAsync(string accountId, string serviceName, string subscriberContextXML, bool includeContentInfo) {
            this.GetServiceViewForServiceAsync(accountId, serviceName, subscriberContextXML, includeContentInfo, null);
        }
        
        /// <remarks/>
        public void GetServiceViewForServiceAsync(string accountId, string serviceName, string subscriberContextXML, bool includeContentInfo, object userState) {
            if ((this.GetServiceViewForServiceOperationCompleted == null)) {
                this.GetServiceViewForServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceViewForServiceOperationCompleted);
            }
            this.InvokeAsync("GetServiceViewForService", new object[] {
                        accountId,
                        serviceName,
                        subscriberContextXML,
                        includeContentInfo}, this.GetServiceViewForServiceOperationCompleted, userState);
        }
        
        private void OnGetServiceViewForServiceOperationCompleted(object arg) {
            if ((this.GetServiceViewForServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceViewForServiceCompleted(this, new GetServiceViewForServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllPricesForServicesWithId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllPricesForServicesWithId(string accountId, ulong serviceId, bool includeNonRecurringPurchasePrices) {
            object[] results = this.Invoke("GetAllPricesForServicesWithId", new object[] {
                        accountId,
                        serviceId,
                        includeNonRecurringPurchasePrices});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllPricesForServicesWithIdAsync(string accountId, ulong serviceId, bool includeNonRecurringPurchasePrices) {
            this.GetAllPricesForServicesWithIdAsync(accountId, serviceId, includeNonRecurringPurchasePrices, null);
        }
        
        /// <remarks/>
        public void GetAllPricesForServicesWithIdAsync(string accountId, ulong serviceId, bool includeNonRecurringPurchasePrices, object userState) {
            if ((this.GetAllPricesForServicesWithIdOperationCompleted == null)) {
                this.GetAllPricesForServicesWithIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllPricesForServicesWithIdOperationCompleted);
            }
            this.InvokeAsync("GetAllPricesForServicesWithId", new object[] {
                        accountId,
                        serviceId,
                        includeNonRecurringPurchasePrices}, this.GetAllPricesForServicesWithIdOperationCompleted, userState);
        }
        
        private void OnGetAllPricesForServicesWithIdOperationCompleted(object arg) {
            if ((this.GetAllPricesForServicesWithIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllPricesForServicesWithIdCompleted(this, new GetAllPricesForServicesWithIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServiceViewForEncryptedServiceid", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceViewForEncryptedServiceid(string accountId, string encryptedServiceId, string regionName, string clientType, string operatorName, string referrer, bool includeContentInfo) {
            object[] results = this.Invoke("GetServiceViewForEncryptedServiceid", new object[] {
                        accountId,
                        encryptedServiceId,
                        regionName,
                        clientType,
                        operatorName,
                        referrer,
                        includeContentInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceViewForEncryptedServiceidAsync(string accountId, string encryptedServiceId, string regionName, string clientType, string operatorName, string referrer, bool includeContentInfo) {
            this.GetServiceViewForEncryptedServiceidAsync(accountId, encryptedServiceId, regionName, clientType, operatorName, referrer, includeContentInfo, null);
        }
        
        /// <remarks/>
        public void GetServiceViewForEncryptedServiceidAsync(string accountId, string encryptedServiceId, string regionName, string clientType, string operatorName, string referrer, bool includeContentInfo, object userState) {
            if ((this.GetServiceViewForEncryptedServiceidOperationCompleted == null)) {
                this.GetServiceViewForEncryptedServiceidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceViewForEncryptedServiceidOperationCompleted);
            }
            this.InvokeAsync("GetServiceViewForEncryptedServiceid", new object[] {
                        accountId,
                        encryptedServiceId,
                        regionName,
                        clientType,
                        operatorName,
                        referrer,
                        includeContentInfo}, this.GetServiceViewForEncryptedServiceidOperationCompleted, userState);
        }
        
        private void OnGetServiceViewForEncryptedServiceidOperationCompleted(object arg) {
            if ((this.GetServiceViewForEncryptedServiceidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceViewForEncryptedServiceidCompleted(this, new GetServiceViewForEncryptedServiceidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServiceViewForId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceViewForId(string accountId, ulong serviceViewObjectId, string subscriberContextXML, bool includeContentInfo) {
            object[] results = this.Invoke("GetServiceViewForId", new object[] {
                        accountId,
                        serviceViewObjectId,
                        subscriberContextXML,
                        includeContentInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceViewForIdAsync(string accountId, ulong serviceViewObjectId, string subscriberContextXML, bool includeContentInfo) {
            this.GetServiceViewForIdAsync(accountId, serviceViewObjectId, subscriberContextXML, includeContentInfo, null);
        }
        
        /// <remarks/>
        public void GetServiceViewForIdAsync(string accountId, ulong serviceViewObjectId, string subscriberContextXML, bool includeContentInfo, object userState) {
            if ((this.GetServiceViewForIdOperationCompleted == null)) {
                this.GetServiceViewForIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceViewForIdOperationCompleted);
            }
            this.InvokeAsync("GetServiceViewForId", new object[] {
                        accountId,
                        serviceViewObjectId,
                        subscriberContextXML,
                        includeContentInfo}, this.GetServiceViewForIdOperationCompleted, userState);
        }
        
        private void OnGetServiceViewForIdOperationCompleted(object arg) {
            if ((this.GetServiceViewForIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceViewForIdCompleted(this, new GetServiceViewForIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServicesForServiceProvider", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServicesForServiceProvider(string accountId, ulong serviceProviderObjectId, bool includeContentInfo, bool includeServiceViewData, bool includeServiceAgreements) {
            object[] results = this.Invoke("GetServicesForServiceProvider", new object[] {
                        accountId,
                        serviceProviderObjectId,
                        includeContentInfo,
                        includeServiceViewData,
                        includeServiceAgreements});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServicesForServiceProviderAsync(string accountId, ulong serviceProviderObjectId, bool includeContentInfo, bool includeServiceViewData, bool includeServiceAgreements) {
            this.GetServicesForServiceProviderAsync(accountId, serviceProviderObjectId, includeContentInfo, includeServiceViewData, includeServiceAgreements, null);
        }
        
        /// <remarks/>
        public void GetServicesForServiceProviderAsync(string accountId, ulong serviceProviderObjectId, bool includeContentInfo, bool includeServiceViewData, bool includeServiceAgreements, object userState) {
            if ((this.GetServicesForServiceProviderOperationCompleted == null)) {
                this.GetServicesForServiceProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServicesForServiceProviderOperationCompleted);
            }
            this.InvokeAsync("GetServicesForServiceProvider", new object[] {
                        accountId,
                        serviceProviderObjectId,
                        includeContentInfo,
                        includeServiceViewData,
                        includeServiceAgreements}, this.GetServicesForServiceProviderOperationCompleted, userState);
        }
        
        private void OnGetServicesForServiceProviderOperationCompleted(object arg) {
            if ((this.GetServicesForServiceProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServicesForServiceProviderCompleted(this, new GetServicesForServiceProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServicesForServiceProvider2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServicesForServiceProvider2(string accountId, ulong serviceProviderObjectId, bool includeContentInfo, bool includeServiceViewData, bool includeServiceAgreements, bool includeContentAgreements) {
            object[] results = this.Invoke("GetServicesForServiceProvider2", new object[] {
                        accountId,
                        serviceProviderObjectId,
                        includeContentInfo,
                        includeServiceViewData,
                        includeServiceAgreements,
                        includeContentAgreements});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServicesForServiceProvider2Async(string accountId, ulong serviceProviderObjectId, bool includeContentInfo, bool includeServiceViewData, bool includeServiceAgreements, bool includeContentAgreements) {
            this.GetServicesForServiceProvider2Async(accountId, serviceProviderObjectId, includeContentInfo, includeServiceViewData, includeServiceAgreements, includeContentAgreements, null);
        }
        
        /// <remarks/>
        public void GetServicesForServiceProvider2Async(string accountId, ulong serviceProviderObjectId, bool includeContentInfo, bool includeServiceViewData, bool includeServiceAgreements, bool includeContentAgreements, object userState) {
            if ((this.GetServicesForServiceProvider2OperationCompleted == null)) {
                this.GetServicesForServiceProvider2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServicesForServiceProvider2OperationCompleted);
            }
            this.InvokeAsync("GetServicesForServiceProvider2", new object[] {
                        accountId,
                        serviceProviderObjectId,
                        includeContentInfo,
                        includeServiceViewData,
                        includeServiceAgreements,
                        includeContentAgreements}, this.GetServicesForServiceProvider2OperationCompleted, userState);
        }
        
        private void OnGetServicesForServiceProvider2OperationCompleted(object arg) {
            if ((this.GetServicesForServiceProvider2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServicesForServiceProvider2Completed(this, new GetServicesForServiceProvider2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServicesIncludedInContentAgreement", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServicesIncludedInContentAgreement(string accountId, string contentAgreementName) {
            object[] results = this.Invoke("GetServicesIncludedInContentAgreement", new object[] {
                        accountId,
                        contentAgreementName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServicesIncludedInContentAgreementAsync(string accountId, string contentAgreementName) {
            this.GetServicesIncludedInContentAgreementAsync(accountId, contentAgreementName, null);
        }
        
        /// <remarks/>
        public void GetServicesIncludedInContentAgreementAsync(string accountId, string contentAgreementName, object userState) {
            if ((this.GetServicesIncludedInContentAgreementOperationCompleted == null)) {
                this.GetServicesIncludedInContentAgreementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServicesIncludedInContentAgreementOperationCompleted);
            }
            this.InvokeAsync("GetServicesIncludedInContentAgreement", new object[] {
                        accountId,
                        contentAgreementName}, this.GetServicesIncludedInContentAgreementOperationCompleted, userState);
        }
        
        private void OnGetServicesIncludedInContentAgreementOperationCompleted(object arg) {
            if ((this.GetServicesIncludedInContentAgreementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServicesIncludedInContentAgreementCompleted(this, new GetServicesIncludedInContentAgreementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateServiceViewElement", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateServiceViewElement(string accountId, ulong elementObjectId, string elementMetadata) {
            object[] results = this.Invoke("UpdateServiceViewElement", new object[] {
                        accountId,
                        elementObjectId,
                        elementMetadata});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateServiceViewElementAsync(string accountId, ulong elementObjectId, string elementMetadata) {
            this.UpdateServiceViewElementAsync(accountId, elementObjectId, elementMetadata, null);
        }
        
        /// <remarks/>
        public void UpdateServiceViewElementAsync(string accountId, ulong elementObjectId, string elementMetadata, object userState) {
            if ((this.UpdateServiceViewElementOperationCompleted == null)) {
                this.UpdateServiceViewElementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServiceViewElementOperationCompleted);
            }
            this.InvokeAsync("UpdateServiceViewElement", new object[] {
                        accountId,
                        elementObjectId,
                        elementMetadata}, this.UpdateServiceViewElementOperationCompleted, userState);
        }
        
        private void OnUpdateServiceViewElementOperationCompleted(object arg) {
            if ((this.UpdateServiceViewElementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServiceViewElementCompleted(this, new UpdateServiceViewElementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateServiceView", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateServiceView(string accountId, ulong serviceViewObjectId, string swMetadata) {
            object[] results = this.Invoke("UpdateServiceView", new object[] {
                        accountId,
                        serviceViewObjectId,
                        swMetadata});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateServiceViewAsync(string accountId, ulong serviceViewObjectId, string swMetadata) {
            this.UpdateServiceViewAsync(accountId, serviceViewObjectId, swMetadata, null);
        }
        
        /// <remarks/>
        public void UpdateServiceViewAsync(string accountId, ulong serviceViewObjectId, string swMetadata, object userState) {
            if ((this.UpdateServiceViewOperationCompleted == null)) {
                this.UpdateServiceViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServiceViewOperationCompleted);
            }
            this.InvokeAsync("UpdateServiceView", new object[] {
                        accountId,
                        serviceViewObjectId,
                        swMetadata}, this.UpdateServiceViewOperationCompleted, userState);
        }
        
        private void OnUpdateServiceViewOperationCompleted(object arg) {
            if ((this.UpdateServiceViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServiceViewCompleted(this, new UpdateServiceViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateService(string accountId, ulong serviceId, string serviceMetadataXML) {
            object[] results = this.Invoke("UpdateService", new object[] {
                        accountId,
                        serviceId,
                        serviceMetadataXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateServiceAsync(string accountId, ulong serviceId, string serviceMetadataXML) {
            this.UpdateServiceAsync(accountId, serviceId, serviceMetadataXML, null);
        }
        
        /// <remarks/>
        public void UpdateServiceAsync(string accountId, ulong serviceId, string serviceMetadataXML, object userState) {
            if ((this.UpdateServiceOperationCompleted == null)) {
                this.UpdateServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServiceOperationCompleted);
            }
            this.InvokeAsync("UpdateService", new object[] {
                        accountId,
                        serviceId,
                        serviceMetadataXML}, this.UpdateServiceOperationCompleted, userState);
        }
        
        private void OnUpdateServiceOperationCompleted(object arg) {
            if ((this.UpdateServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServiceCompleted(this, new UpdateServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServiceForId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceForId(string accountId, long serviceId, bool includeContentInfo, bool includeServiceViewData) {
            object[] results = this.Invoke("GetServiceForId", new object[] {
                        accountId,
                        serviceId,
                        includeContentInfo,
                        includeServiceViewData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceForIdAsync(string accountId, long serviceId, bool includeContentInfo, bool includeServiceViewData) {
            this.GetServiceForIdAsync(accountId, serviceId, includeContentInfo, includeServiceViewData, null);
        }
        
        /// <remarks/>
        public void GetServiceForIdAsync(string accountId, long serviceId, bool includeContentInfo, bool includeServiceViewData, object userState) {
            if ((this.GetServiceForIdOperationCompleted == null)) {
                this.GetServiceForIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceForIdOperationCompleted);
            }
            this.InvokeAsync("GetServiceForId", new object[] {
                        accountId,
                        serviceId,
                        includeContentInfo,
                        includeServiceViewData}, this.GetServiceForIdOperationCompleted, userState);
        }
        
        private void OnGetServiceForIdOperationCompleted(object arg) {
            if ((this.GetServiceForIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceForIdCompleted(this, new GetServiceForIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServiceForId2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceForId2(string accountId, long serviceId, bool includeContentInfo, bool includeServiceViewData, bool includeContentAgreement) {
            object[] results = this.Invoke("GetServiceForId2", new object[] {
                        accountId,
                        serviceId,
                        includeContentInfo,
                        includeServiceViewData,
                        includeContentAgreement});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceForId2Async(string accountId, long serviceId, bool includeContentInfo, bool includeServiceViewData, bool includeContentAgreement) {
            this.GetServiceForId2Async(accountId, serviceId, includeContentInfo, includeServiceViewData, includeContentAgreement, null);
        }
        
        /// <remarks/>
        public void GetServiceForId2Async(string accountId, long serviceId, bool includeContentInfo, bool includeServiceViewData, bool includeContentAgreement, object userState) {
            if ((this.GetServiceForId2OperationCompleted == null)) {
                this.GetServiceForId2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceForId2OperationCompleted);
            }
            this.InvokeAsync("GetServiceForId2", new object[] {
                        accountId,
                        serviceId,
                        includeContentInfo,
                        includeServiceViewData,
                        includeContentAgreement}, this.GetServiceForId2OperationCompleted, userState);
        }
        
        private void OnGetServiceForId2OperationCompleted(object arg) {
            if ((this.GetServiceForId2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceForId2Completed(this, new GetServiceForId2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServiceForObjectId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceForObjectId(string accountId, ulong serviceObjectId, bool includeContentInfo, bool includeServiceViewData) {
            object[] results = this.Invoke("GetServiceForObjectId", new object[] {
                        accountId,
                        serviceObjectId,
                        includeContentInfo,
                        includeServiceViewData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceForObjectIdAsync(string accountId, ulong serviceObjectId, bool includeContentInfo, bool includeServiceViewData) {
            this.GetServiceForObjectIdAsync(accountId, serviceObjectId, includeContentInfo, includeServiceViewData, null);
        }
        
        /// <remarks/>
        public void GetServiceForObjectIdAsync(string accountId, ulong serviceObjectId, bool includeContentInfo, bool includeServiceViewData, object userState) {
            if ((this.GetServiceForObjectIdOperationCompleted == null)) {
                this.GetServiceForObjectIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceForObjectIdOperationCompleted);
            }
            this.InvokeAsync("GetServiceForObjectId", new object[] {
                        accountId,
                        serviceObjectId,
                        includeContentInfo,
                        includeServiceViewData}, this.GetServiceForObjectIdOperationCompleted, userState);
        }
        
        private void OnGetServiceForObjectIdOperationCompleted(object arg) {
            if ((this.GetServiceForObjectIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceForObjectIdCompleted(this, new GetServiceForObjectIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPurchaseInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPurchaseInfo(string accountId, string purchaseInfoParametersXML, System.DateTime from, System.DateTime to) {
            object[] results = this.Invoke("GetPurchaseInfo", new object[] {
                        accountId,
                        purchaseInfoParametersXML,
                        from,
                        to});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPurchaseInfoAsync(string accountId, string purchaseInfoParametersXML, System.DateTime from, System.DateTime to) {
            this.GetPurchaseInfoAsync(accountId, purchaseInfoParametersXML, from, to, null);
        }
        
        /// <remarks/>
        public void GetPurchaseInfoAsync(string accountId, string purchaseInfoParametersXML, System.DateTime from, System.DateTime to, object userState) {
            if ((this.GetPurchaseInfoOperationCompleted == null)) {
                this.GetPurchaseInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPurchaseInfoOperationCompleted);
            }
            this.InvokeAsync("GetPurchaseInfo", new object[] {
                        accountId,
                        purchaseInfoParametersXML,
                        from,
                        to}, this.GetPurchaseInfoOperationCompleted, userState);
        }
        
        private void OnGetPurchaseInfoOperationCompleted(object arg) {
            if ((this.GetPurchaseInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPurchaseInfoCompleted(this, new GetPurchaseInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPurchaseStatInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPurchaseStatInfo(string accountId, string PurchaseStatInfoXML) {
            object[] results = this.Invoke("GetPurchaseStatInfo", new object[] {
                        accountId,
                        PurchaseStatInfoXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPurchaseStatInfoAsync(string accountId, string PurchaseStatInfoXML) {
            this.GetPurchaseStatInfoAsync(accountId, PurchaseStatInfoXML, null);
        }
        
        /// <remarks/>
        public void GetPurchaseStatInfoAsync(string accountId, string PurchaseStatInfoXML, object userState) {
            if ((this.GetPurchaseStatInfoOperationCompleted == null)) {
                this.GetPurchaseStatInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPurchaseStatInfoOperationCompleted);
            }
            this.InvokeAsync("GetPurchaseStatInfo", new object[] {
                        accountId,
                        PurchaseStatInfoXML}, this.GetPurchaseStatInfoOperationCompleted, userState);
        }
        
        private void OnGetPurchaseStatInfoOperationCompleted(object arg) {
            if ((this.GetPurchaseStatInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPurchaseStatInfoCompleted(this, new GetPurchaseStatInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetContentUsageStatInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetContentUsageStatInfo(string accountId, string contentUsageStatInfoParametersXML) {
            object[] results = this.Invoke("GetContentUsageStatInfo", new object[] {
                        accountId,
                        contentUsageStatInfoParametersXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetContentUsageStatInfoAsync(string accountId, string contentUsageStatInfoParametersXML) {
            this.GetContentUsageStatInfoAsync(accountId, contentUsageStatInfoParametersXML, null);
        }
        
        /// <remarks/>
        public void GetContentUsageStatInfoAsync(string accountId, string contentUsageStatInfoParametersXML, object userState) {
            if ((this.GetContentUsageStatInfoOperationCompleted == null)) {
                this.GetContentUsageStatInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContentUsageStatInfoOperationCompleted);
            }
            this.InvokeAsync("GetContentUsageStatInfo", new object[] {
                        accountId,
                        contentUsageStatInfoParametersXML}, this.GetContentUsageStatInfoOperationCompleted, userState);
        }
        
        private void OnGetContentUsageStatInfoOperationCompleted(object arg) {
            if ((this.GetContentUsageStatInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContentUsageStatInfoCompleted(this, new GetContentUsageStatInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRegionForIp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRegionForIp(string accountId, string ip) {
            object[] results = this.Invoke("GetRegionForIp", new object[] {
                        accountId,
                        ip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRegionForIpAsync(string accountId, string ip) {
            this.GetRegionForIpAsync(accountId, ip, null);
        }
        
        /// <remarks/>
        public void GetRegionForIpAsync(string accountId, string ip, object userState) {
            if ((this.GetRegionForIpOperationCompleted == null)) {
                this.GetRegionForIpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRegionForIpOperationCompleted);
            }
            this.InvokeAsync("GetRegionForIp", new object[] {
                        accountId,
                        ip}, this.GetRegionForIpOperationCompleted, userState);
        }
        
        private void OnGetRegionForIpOperationCompleted(object arg) {
            if ((this.GetRegionForIpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRegionForIpCompleted(this, new GetRegionForIpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllLanguages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllLanguages(string accountId) {
            object[] results = this.Invoke("GetAllLanguages", new object[] {
                        accountId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllLanguagesAsync(string accountId) {
            this.GetAllLanguagesAsync(accountId, null);
        }
        
        /// <remarks/>
        public void GetAllLanguagesAsync(string accountId, object userState) {
            if ((this.GetAllLanguagesOperationCompleted == null)) {
                this.GetAllLanguagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllLanguagesOperationCompleted);
            }
            this.InvokeAsync("GetAllLanguages", new object[] {
                        accountId}, this.GetAllLanguagesOperationCompleted, userState);
        }
        
        private void OnGetAllLanguagesOperationCompleted(object arg) {
            if ((this.GetAllLanguagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllLanguagesCompleted(this, new GetAllLanguagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddRegion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddRegion(string accountId, string regionXML) {
            object[] results = this.Invoke("AddRegion", new object[] {
                        accountId,
                        regionXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddRegionAsync(string accountId, string regionXML) {
            this.AddRegionAsync(accountId, regionXML, null);
        }
        
        /// <remarks/>
        public void AddRegionAsync(string accountId, string regionXML, object userState) {
            if ((this.AddRegionOperationCompleted == null)) {
                this.AddRegionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRegionOperationCompleted);
            }
            this.InvokeAsync("AddRegion", new object[] {
                        accountId,
                        regionXML}, this.AddRegionOperationCompleted, userState);
        }
        
        private void OnAddRegionOperationCompleted(object arg) {
            if ((this.AddRegionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRegionCompleted(this, new AddRegionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateRegion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateRegion(string accountId, string regionXML) {
            object[] results = this.Invoke("UpdateRegion", new object[] {
                        accountId,
                        regionXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateRegionAsync(string accountId, string regionXML) {
            this.UpdateRegionAsync(accountId, regionXML, null);
        }
        
        /// <remarks/>
        public void UpdateRegionAsync(string accountId, string regionXML, object userState) {
            if ((this.UpdateRegionOperationCompleted == null)) {
                this.UpdateRegionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRegionOperationCompleted);
            }
            this.InvokeAsync("UpdateRegion", new object[] {
                        accountId,
                        regionXML}, this.UpdateRegionOperationCompleted, userState);
        }
        
        private void OnUpdateRegionOperationCompleted(object arg) {
            if ((this.UpdateRegionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRegionCompleted(this, new UpdateRegionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRegion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRegion(string accountId, string regionName) {
            object[] results = this.Invoke("GetRegion", new object[] {
                        accountId,
                        regionName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRegionAsync(string accountId, string regionName) {
            this.GetRegionAsync(accountId, regionName, null);
        }
        
        /// <remarks/>
        public void GetRegionAsync(string accountId, string regionName, object userState) {
            if ((this.GetRegionOperationCompleted == null)) {
                this.GetRegionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRegionOperationCompleted);
            }
            this.InvokeAsync("GetRegion", new object[] {
                        accountId,
                        regionName}, this.GetRegionOperationCompleted, userState);
        }
        
        private void OnGetRegionOperationCompleted(object arg) {
            if ((this.GetRegionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRegionCompleted(this, new GetRegionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteRegion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteRegion(string accountId, string regionName) {
            object[] results = this.Invoke("DeleteRegion", new object[] {
                        accountId,
                        regionName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteRegionAsync(string accountId, string regionName) {
            this.DeleteRegionAsync(accountId, regionName, null);
        }
        
        /// <remarks/>
        public void DeleteRegionAsync(string accountId, string regionName, object userState) {
            if ((this.DeleteRegionOperationCompleted == null)) {
                this.DeleteRegionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRegionOperationCompleted);
            }
            this.InvokeAsync("DeleteRegion", new object[] {
                        accountId,
                        regionName}, this.DeleteRegionOperationCompleted, userState);
        }
        
        private void OnDeleteRegionOperationCompleted(object arg) {
            if ((this.DeleteRegionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteRegionCompleted(this, new DeleteRegionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllRegions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllRegions(string accountId) {
            object[] results = this.Invoke("GetAllRegions", new object[] {
                        accountId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllRegionsAsync(string accountId) {
            this.GetAllRegionsAsync(accountId, null);
        }
        
        /// <remarks/>
        public void GetAllRegionsAsync(string accountId, object userState) {
            if ((this.GetAllRegionsOperationCompleted == null)) {
                this.GetAllRegionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllRegionsOperationCompleted);
            }
            this.InvokeAsync("GetAllRegions", new object[] {
                        accountId}, this.GetAllRegionsOperationCompleted, userState);
        }
        
        private void OnGetAllRegionsOperationCompleted(object arg) {
            if ((this.GetAllRegionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllRegionsCompleted(this, new GetAllRegionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSingleContentServicePrice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetSingleContentServicePrice(string accountId, string serviceName, string servicePriceId, string contentId, decimal price) {
            object[] results = this.Invoke("SetSingleContentServicePrice", new object[] {
                        accountId,
                        serviceName,
                        servicePriceId,
                        contentId,
                        price});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetSingleContentServicePriceAsync(string accountId, string serviceName, string servicePriceId, string contentId, decimal price) {
            this.SetSingleContentServicePriceAsync(accountId, serviceName, servicePriceId, contentId, price, null);
        }
        
        /// <remarks/>
        public void SetSingleContentServicePriceAsync(string accountId, string serviceName, string servicePriceId, string contentId, decimal price, object userState) {
            if ((this.SetSingleContentServicePriceOperationCompleted == null)) {
                this.SetSingleContentServicePriceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSingleContentServicePriceOperationCompleted);
            }
            this.InvokeAsync("SetSingleContentServicePrice", new object[] {
                        accountId,
                        serviceName,
                        servicePriceId,
                        contentId,
                        price}, this.SetSingleContentServicePriceOperationCompleted, userState);
        }
        
        private void OnSetSingleContentServicePriceOperationCompleted(object arg) {
            if ((this.SetSingleContentServicePriceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSingleContentServicePriceCompleted(this, new SetSingleContentServicePriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSingleContentServicePrice2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetSingleContentServicePrice2(string accountId, string servicePriceId, string contentId, decimal price) {
            object[] results = this.Invoke("SetSingleContentServicePrice2", new object[] {
                        accountId,
                        servicePriceId,
                        contentId,
                        price});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetSingleContentServicePrice2Async(string accountId, string servicePriceId, string contentId, decimal price) {
            this.SetSingleContentServicePrice2Async(accountId, servicePriceId, contentId, price, null);
        }
        
        /// <remarks/>
        public void SetSingleContentServicePrice2Async(string accountId, string servicePriceId, string contentId, decimal price, object userState) {
            if ((this.SetSingleContentServicePrice2OperationCompleted == null)) {
                this.SetSingleContentServicePrice2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSingleContentServicePrice2OperationCompleted);
            }
            this.InvokeAsync("SetSingleContentServicePrice2", new object[] {
                        accountId,
                        servicePriceId,
                        contentId,
                        price}, this.SetSingleContentServicePrice2OperationCompleted, userState);
        }
        
        private void OnSetSingleContentServicePrice2OperationCompleted(object arg) {
            if ((this.SetSingleContentServicePrice2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSingleContentServicePrice2Completed(this, new SetSingleContentServicePrice2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExcludeContentFromServicePrice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExcludeContentFromServicePrice(string accountId, string servicePriceId, string contentId) {
            object[] results = this.Invoke("ExcludeContentFromServicePrice", new object[] {
                        accountId,
                        servicePriceId,
                        contentId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExcludeContentFromServicePriceAsync(string accountId, string servicePriceId, string contentId) {
            this.ExcludeContentFromServicePriceAsync(accountId, servicePriceId, contentId, null);
        }
        
        /// <remarks/>
        public void ExcludeContentFromServicePriceAsync(string accountId, string servicePriceId, string contentId, object userState) {
            if ((this.ExcludeContentFromServicePriceOperationCompleted == null)) {
                this.ExcludeContentFromServicePriceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExcludeContentFromServicePriceOperationCompleted);
            }
            this.InvokeAsync("ExcludeContentFromServicePrice", new object[] {
                        accountId,
                        servicePriceId,
                        contentId}, this.ExcludeContentFromServicePriceOperationCompleted, userState);
        }
        
        private void OnExcludeContentFromServicePriceOperationCompleted(object arg) {
            if ((this.ExcludeContentFromServicePriceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExcludeContentFromServicePriceCompleted(this, new ExcludeContentFromServicePriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateServicePrice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateServicePrice(string accountId, string multipleServicePriceXML, ulong serviceId) {
            object[] results = this.Invoke("CreateServicePrice", new object[] {
                        accountId,
                        multipleServicePriceXML,
                        serviceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateServicePriceAsync(string accountId, string multipleServicePriceXML, ulong serviceId) {
            this.CreateServicePriceAsync(accountId, multipleServicePriceXML, serviceId, null);
        }
        
        /// <remarks/>
        public void CreateServicePriceAsync(string accountId, string multipleServicePriceXML, ulong serviceId, object userState) {
            if ((this.CreateServicePriceOperationCompleted == null)) {
                this.CreateServicePriceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateServicePriceOperationCompleted);
            }
            this.InvokeAsync("CreateServicePrice", new object[] {
                        accountId,
                        multipleServicePriceXML,
                        serviceId}, this.CreateServicePriceOperationCompleted, userState);
        }
        
        private void OnCreateServicePriceOperationCompleted(object arg) {
            if ((this.CreateServicePriceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateServicePriceCompleted(this, new CreateServicePriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateServicePrice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateServicePrice(string accountId, ulong servicePriceId, string multipleServicePriceXML) {
            object[] results = this.Invoke("UpdateServicePrice", new object[] {
                        accountId,
                        servicePriceId,
                        multipleServicePriceXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateServicePriceAsync(string accountId, ulong servicePriceId, string multipleServicePriceXML) {
            this.UpdateServicePriceAsync(accountId, servicePriceId, multipleServicePriceXML, null);
        }
        
        /// <remarks/>
        public void UpdateServicePriceAsync(string accountId, ulong servicePriceId, string multipleServicePriceXML, object userState) {
            if ((this.UpdateServicePriceOperationCompleted == null)) {
                this.UpdateServicePriceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServicePriceOperationCompleted);
            }
            this.InvokeAsync("UpdateServicePrice", new object[] {
                        accountId,
                        servicePriceId,
                        multipleServicePriceXML}, this.UpdateServicePriceOperationCompleted, userState);
        }
        
        private void OnUpdateServicePriceOperationCompleted(object arg) {
            if ((this.UpdateServicePriceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServicePriceCompleted(this, new UpdateServicePriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteServicePrice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteServicePrice(string accountId, ulong servicePriceId) {
            object[] results = this.Invoke("DeleteServicePrice", new object[] {
                        accountId,
                        servicePriceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteServicePriceAsync(string accountId, ulong servicePriceId) {
            this.DeleteServicePriceAsync(accountId, servicePriceId, null);
        }
        
        /// <remarks/>
        public void DeleteServicePriceAsync(string accountId, ulong servicePriceId, object userState) {
            if ((this.DeleteServicePriceOperationCompleted == null)) {
                this.DeleteServicePriceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteServicePriceOperationCompleted);
            }
            this.InvokeAsync("DeleteServicePrice", new object[] {
                        accountId,
                        servicePriceId}, this.DeleteServicePriceOperationCompleted, userState);
        }
        
        private void OnDeleteServicePriceOperationCompleted(object arg) {
            if ((this.DeleteServicePriceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteServicePriceCompleted(this, new DeleteServicePriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCategoryInfoWithAllContentAndChannels", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCategoryInfoWithAllContentAndChannels(string accountId, ulong serviceAgreementId) {
            object[] results = this.Invoke("GetCategoryInfoWithAllContentAndChannels", new object[] {
                        accountId,
                        serviceAgreementId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCategoryInfoWithAllContentAndChannelsAsync(string accountId, ulong serviceAgreementId) {
            this.GetCategoryInfoWithAllContentAndChannelsAsync(accountId, serviceAgreementId, null);
        }
        
        /// <remarks/>
        public void GetCategoryInfoWithAllContentAndChannelsAsync(string accountId, ulong serviceAgreementId, object userState) {
            if ((this.GetCategoryInfoWithAllContentAndChannelsOperationCompleted == null)) {
                this.GetCategoryInfoWithAllContentAndChannelsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCategoryInfoWithAllContentAndChannelsOperationCompleted);
            }
            this.InvokeAsync("GetCategoryInfoWithAllContentAndChannels", new object[] {
                        accountId,
                        serviceAgreementId}, this.GetCategoryInfoWithAllContentAndChannelsOperationCompleted, userState);
        }
        
        private void OnGetCategoryInfoWithAllContentAndChannelsOperationCompleted(object arg) {
            if ((this.GetCategoryInfoWithAllContentAndChannelsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCategoryInfoWithAllContentAndChannelsCompleted(this, new GetCategoryInfoWithAllContentAndChannelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServiceCategoryInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceCategoryInfo(string accountId, ulong serviceAgreementId, ulong parentCategoryId, bool recurseREsult, bool includeLeafData, bool showHiddenCategories) {
            object[] results = this.Invoke("GetServiceCategoryInfo", new object[] {
                        accountId,
                        serviceAgreementId,
                        parentCategoryId,
                        recurseREsult,
                        includeLeafData,
                        showHiddenCategories});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceCategoryInfoAsync(string accountId, ulong serviceAgreementId, ulong parentCategoryId, bool recurseREsult, bool includeLeafData, bool showHiddenCategories) {
            this.GetServiceCategoryInfoAsync(accountId, serviceAgreementId, parentCategoryId, recurseREsult, includeLeafData, showHiddenCategories, null);
        }
        
        /// <remarks/>
        public void GetServiceCategoryInfoAsync(string accountId, ulong serviceAgreementId, ulong parentCategoryId, bool recurseREsult, bool includeLeafData, bool showHiddenCategories, object userState) {
            if ((this.GetServiceCategoryInfoOperationCompleted == null)) {
                this.GetServiceCategoryInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceCategoryInfoOperationCompleted);
            }
            this.InvokeAsync("GetServiceCategoryInfo", new object[] {
                        accountId,
                        serviceAgreementId,
                        parentCategoryId,
                        recurseREsult,
                        includeLeafData,
                        showHiddenCategories}, this.GetServiceCategoryInfoOperationCompleted, userState);
        }
        
        private void OnGetServiceCategoryInfoOperationCompleted(object arg) {
            if ((this.GetServiceCategoryInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceCategoryInfoCompleted(this, new GetServiceCategoryInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfig", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfig(string accountId, ulong serviceAgreementId, ulong parentCategoryId, bool recurseREsult, bool includeLeafData, bool showHiddenCategories) {
            object[] results = this.Invoke("GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfig", new object[] {
                        accountId,
                        serviceAgreementId,
                        parentCategoryId,
                        recurseREsult,
                        includeLeafData,
                        showHiddenCategories});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigAsync(string accountId, ulong serviceAgreementId, ulong parentCategoryId, bool recurseREsult, bool includeLeafData, bool showHiddenCategories) {
            this.GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigAsync(accountId, serviceAgreementId, parentCategoryId, recurseREsult, includeLeafData, showHiddenCategories, null);
        }
        
        /// <remarks/>
        public void GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigAsync(string accountId, ulong serviceAgreementId, ulong parentCategoryId, bool recurseREsult, bool includeLeafData, bool showHiddenCategories, object userState) {
            if ((this.GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigOperationCompleted == null)) {
                this.GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigOperationCompleted);
            }
            this.InvokeAsync("GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfig", new object[] {
                        accountId,
                        serviceAgreementId,
                        parentCategoryId,
                        recurseREsult,
                        includeLeafData,
                        showHiddenCategories}, this.GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigOperationCompleted, userState);
        }
        
        private void OnGetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigOperationCompleted(object arg) {
            if ((this.GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigCompleted(this, new GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetContentForServiceAgreement", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetContentForServiceAgreement(string accountId, ulong serviceAgreementId, ulong rootCategoryObjectId, string returnType, int maxReturn, string regionName, int returnStartIndex, int returnStopIndex) {
            object[] results = this.Invoke("GetContentForServiceAgreement", new object[] {
                        accountId,
                        serviceAgreementId,
                        rootCategoryObjectId,
                        returnType,
                        maxReturn,
                        regionName,
                        returnStartIndex,
                        returnStopIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetContentForServiceAgreementAsync(string accountId, ulong serviceAgreementId, ulong rootCategoryObjectId, string returnType, int maxReturn, string regionName, int returnStartIndex, int returnStopIndex) {
            this.GetContentForServiceAgreementAsync(accountId, serviceAgreementId, rootCategoryObjectId, returnType, maxReturn, regionName, returnStartIndex, returnStopIndex, null);
        }
        
        /// <remarks/>
        public void GetContentForServiceAgreementAsync(string accountId, ulong serviceAgreementId, ulong rootCategoryObjectId, string returnType, int maxReturn, string regionName, int returnStartIndex, int returnStopIndex, object userState) {
            if ((this.GetContentForServiceAgreementOperationCompleted == null)) {
                this.GetContentForServiceAgreementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContentForServiceAgreementOperationCompleted);
            }
            this.InvokeAsync("GetContentForServiceAgreement", new object[] {
                        accountId,
                        serviceAgreementId,
                        rootCategoryObjectId,
                        returnType,
                        maxReturn,
                        regionName,
                        returnStartIndex,
                        returnStopIndex}, this.GetContentForServiceAgreementOperationCompleted, userState);
        }
        
        private void OnGetContentForServiceAgreementOperationCompleted(object arg) {
            if ((this.GetContentForServiceAgreementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContentForServiceAgreementCompleted(this, new GetContentForServiceAgreementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetContentAndServiceForCategory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetContentAndServiceForCategory(string accountId, ulong serviceAgreementId, ulong rootCategoryObjectId, int maxReturn, int returnStartIndex, int returnStopIndex) {
            object[] results = this.Invoke("GetContentAndServiceForCategory", new object[] {
                        accountId,
                        serviceAgreementId,
                        rootCategoryObjectId,
                        maxReturn,
                        returnStartIndex,
                        returnStopIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetContentAndServiceForCategoryAsync(string accountId, ulong serviceAgreementId, ulong rootCategoryObjectId, int maxReturn, int returnStartIndex, int returnStopIndex) {
            this.GetContentAndServiceForCategoryAsync(accountId, serviceAgreementId, rootCategoryObjectId, maxReturn, returnStartIndex, returnStopIndex, null);
        }
        
        /// <remarks/>
        public void GetContentAndServiceForCategoryAsync(string accountId, ulong serviceAgreementId, ulong rootCategoryObjectId, int maxReturn, int returnStartIndex, int returnStopIndex, object userState) {
            if ((this.GetContentAndServiceForCategoryOperationCompleted == null)) {
                this.GetContentAndServiceForCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContentAndServiceForCategoryOperationCompleted);
            }
            this.InvokeAsync("GetContentAndServiceForCategory", new object[] {
                        accountId,
                        serviceAgreementId,
                        rootCategoryObjectId,
                        maxReturn,
                        returnStartIndex,
                        returnStopIndex}, this.GetContentAndServiceForCategoryOperationCompleted, userState);
        }
        
        private void OnGetContentAndServiceForCategoryOperationCompleted(object arg) {
            if ((this.GetContentAndServiceForCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContentAndServiceForCategoryCompleted(this, new GetContentAndServiceForCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchContentForServiceAgreement", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchContentForServiceAgreement(string accountId, ulong serviceAgreementId, string searchWhat, string searchWhere, string subscriberContextXML, int returnStartIndex, int returnStopIndex) {
            object[] results = this.Invoke("SearchContentForServiceAgreement", new object[] {
                        accountId,
                        serviceAgreementId,
                        searchWhat,
                        searchWhere,
                        subscriberContextXML,
                        returnStartIndex,
                        returnStopIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchContentForServiceAgreementAsync(string accountId, ulong serviceAgreementId, string searchWhat, string searchWhere, string subscriberContextXML, int returnStartIndex, int returnStopIndex) {
            this.SearchContentForServiceAgreementAsync(accountId, serviceAgreementId, searchWhat, searchWhere, subscriberContextXML, returnStartIndex, returnStopIndex, null);
        }
        
        /// <remarks/>
        public void SearchContentForServiceAgreementAsync(string accountId, ulong serviceAgreementId, string searchWhat, string searchWhere, string subscriberContextXML, int returnStartIndex, int returnStopIndex, object userState) {
            if ((this.SearchContentForServiceAgreementOperationCompleted == null)) {
                this.SearchContentForServiceAgreementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchContentForServiceAgreementOperationCompleted);
            }
            this.InvokeAsync("SearchContentForServiceAgreement", new object[] {
                        accountId,
                        serviceAgreementId,
                        searchWhat,
                        searchWhere,
                        subscriberContextXML,
                        returnStartIndex,
                        returnStopIndex}, this.SearchContentForServiceAgreementOperationCompleted, userState);
        }
        
        private void OnSearchContentForServiceAgreementOperationCompleted(object arg) {
            if ((this.SearchContentForServiceAgreementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchContentForServiceAgreementCompleted(this, new SearchContentForServiceAgreementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMultipleServicePrice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMultipleServicePrice(string accountId, ulong priceObjectID) {
            object[] results = this.Invoke("GetMultipleServicePrice", new object[] {
                        accountId,
                        priceObjectID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMultipleServicePriceAsync(string accountId, ulong priceObjectID) {
            this.GetMultipleServicePriceAsync(accountId, priceObjectID, null);
        }
        
        /// <remarks/>
        public void GetMultipleServicePriceAsync(string accountId, ulong priceObjectID, object userState) {
            if ((this.GetMultipleServicePriceOperationCompleted == null)) {
                this.GetMultipleServicePriceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMultipleServicePriceOperationCompleted);
            }
            this.InvokeAsync("GetMultipleServicePrice", new object[] {
                        accountId,
                        priceObjectID}, this.GetMultipleServicePriceOperationCompleted, userState);
        }
        
        private void OnGetMultipleServicePriceOperationCompleted(object arg) {
            if ((this.GetMultipleServicePriceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMultipleServicePriceCompleted(this, new GetMultipleServicePriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMultipleServicePriceByPriceID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMultipleServicePriceByPriceID(string accountId, ulong priceID) {
            object[] results = this.Invoke("GetMultipleServicePriceByPriceID", new object[] {
                        accountId,
                        priceID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMultipleServicePriceByPriceIDAsync(string accountId, ulong priceID) {
            this.GetMultipleServicePriceByPriceIDAsync(accountId, priceID, null);
        }
        
        /// <remarks/>
        public void GetMultipleServicePriceByPriceIDAsync(string accountId, ulong priceID, object userState) {
            if ((this.GetMultipleServicePriceByPriceIDOperationCompleted == null)) {
                this.GetMultipleServicePriceByPriceIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMultipleServicePriceByPriceIDOperationCompleted);
            }
            this.InvokeAsync("GetMultipleServicePriceByPriceID", new object[] {
                        accountId,
                        priceID}, this.GetMultipleServicePriceByPriceIDOperationCompleted, userState);
        }
        
        private void OnGetMultipleServicePriceByPriceIDOperationCompleted(object arg) {
            if ((this.GetMultipleServicePriceByPriceIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMultipleServicePriceByPriceIDCompleted(this, new GetMultipleServicePriceByPriceIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServiceAgreementInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceAgreementInfo(string accountId, ulong serviceAgreementId) {
            object[] results = this.Invoke("GetServiceAgreementInfo", new object[] {
                        accountId,
                        serviceAgreementId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceAgreementInfoAsync(string accountId, ulong serviceAgreementId) {
            this.GetServiceAgreementInfoAsync(accountId, serviceAgreementId, null);
        }
        
        /// <remarks/>
        public void GetServiceAgreementInfoAsync(string accountId, ulong serviceAgreementId, object userState) {
            if ((this.GetServiceAgreementInfoOperationCompleted == null)) {
                this.GetServiceAgreementInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceAgreementInfoOperationCompleted);
            }
            this.InvokeAsync("GetServiceAgreementInfo", new object[] {
                        accountId,
                        serviceAgreementId}, this.GetServiceAgreementInfoOperationCompleted, userState);
        }
        
        private void OnGetServiceAgreementInfoOperationCompleted(object arg) {
            if ((this.GetServiceAgreementInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceAgreementInfoCompleted(this, new GetServiceAgreementInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ServiceNameExists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ServiceNameExists(string accountId, string serviceName) {
            object[] results = this.Invoke("ServiceNameExists", new object[] {
                        accountId,
                        serviceName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ServiceNameExistsAsync(string accountId, string serviceName) {
            this.ServiceNameExistsAsync(accountId, serviceName, null);
        }
        
        /// <remarks/>
        public void ServiceNameExistsAsync(string accountId, string serviceName, object userState) {
            if ((this.ServiceNameExistsOperationCompleted == null)) {
                this.ServiceNameExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceNameExistsOperationCompleted);
            }
            this.InvokeAsync("ServiceNameExists", new object[] {
                        accountId,
                        serviceName}, this.ServiceNameExistsOperationCompleted, userState);
        }
        
        private void OnServiceNameExistsOperationCompleted(object arg) {
            if ((this.ServiceNameExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceNameExistsCompleted(this, new ServiceNameExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEventsFromSink", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEventsFromSink(string accountId, ulong lastEventObjectID, ulong userIdToIgnore) {
            object[] results = this.Invoke("GetEventsFromSink", new object[] {
                        accountId,
                        lastEventObjectID,
                        userIdToIgnore});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEventsFromSinkAsync(string accountId, ulong lastEventObjectID, ulong userIdToIgnore) {
            this.GetEventsFromSinkAsync(accountId, lastEventObjectID, userIdToIgnore, null);
        }
        
        /// <remarks/>
        public void GetEventsFromSinkAsync(string accountId, ulong lastEventObjectID, ulong userIdToIgnore, object userState) {
            if ((this.GetEventsFromSinkOperationCompleted == null)) {
                this.GetEventsFromSinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEventsFromSinkOperationCompleted);
            }
            this.InvokeAsync("GetEventsFromSink", new object[] {
                        accountId,
                        lastEventObjectID,
                        userIdToIgnore}, this.GetEventsFromSinkOperationCompleted, userState);
        }
        
        private void OnGetEventsFromSinkOperationCompleted(object arg) {
            if ((this.GetEventsFromSinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEventsFromSinkCompleted(this, new GetEventsFromSinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEventsOfType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEventsOfType(string accountId, int eventType, ulong lastFetchedID, bool useServerLatestID) {
            object[] results = this.Invoke("GetEventsOfType", new object[] {
                        accountId,
                        eventType,
                        lastFetchedID,
                        useServerLatestID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEventsOfTypeAsync(string accountId, int eventType, ulong lastFetchedID, bool useServerLatestID) {
            this.GetEventsOfTypeAsync(accountId, eventType, lastFetchedID, useServerLatestID, null);
        }
        
        /// <remarks/>
        public void GetEventsOfTypeAsync(string accountId, int eventType, ulong lastFetchedID, bool useServerLatestID, object userState) {
            if ((this.GetEventsOfTypeOperationCompleted == null)) {
                this.GetEventsOfTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEventsOfTypeOperationCompleted);
            }
            this.InvokeAsync("GetEventsOfType", new object[] {
                        accountId,
                        eventType,
                        lastFetchedID,
                        useServerLatestID}, this.GetEventsOfTypeOperationCompleted, userState);
        }
        
        private void OnGetEventsOfTypeOperationCompleted(object arg) {
            if ((this.GetEventsOfTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEventsOfTypeCompleted(this, new GetEventsOfTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePurchaseValidityTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdatePurchaseValidityTime(string accountId, ulong purchaseId, System.DateTime newFrom, System.DateTime newTo) {
            object[] results = this.Invoke("UpdatePurchaseValidityTime", new object[] {
                        accountId,
                        purchaseId,
                        newFrom,
                        newTo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePurchaseValidityTimeAsync(string accountId, ulong purchaseId, System.DateTime newFrom, System.DateTime newTo) {
            this.UpdatePurchaseValidityTimeAsync(accountId, purchaseId, newFrom, newTo, null);
        }
        
        /// <remarks/>
        public void UpdatePurchaseValidityTimeAsync(string accountId, ulong purchaseId, System.DateTime newFrom, System.DateTime newTo, object userState) {
            if ((this.UpdatePurchaseValidityTimeOperationCompleted == null)) {
                this.UpdatePurchaseValidityTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePurchaseValidityTimeOperationCompleted);
            }
            this.InvokeAsync("UpdatePurchaseValidityTime", new object[] {
                        accountId,
                        purchaseId,
                        newFrom,
                        newTo}, this.UpdatePurchaseValidityTimeOperationCompleted, userState);
        }
        
        private void OnUpdatePurchaseValidityTimeOperationCompleted(object arg) {
            if ((this.UpdatePurchaseValidityTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePurchaseValidityTimeCompleted(this, new UpdatePurchaseValidityTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServiceInfoCompletedEventHandler(object sender, GetServiceInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServiceViewForServiceCompletedEventHandler(object sender, GetServiceViewForServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceViewForServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceViewForServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllPricesForServicesWithIdCompletedEventHandler(object sender, GetAllPricesForServicesWithIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllPricesForServicesWithIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllPricesForServicesWithIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServiceViewForEncryptedServiceidCompletedEventHandler(object sender, GetServiceViewForEncryptedServiceidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceViewForEncryptedServiceidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceViewForEncryptedServiceidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServiceViewForIdCompletedEventHandler(object sender, GetServiceViewForIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceViewForIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceViewForIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServicesForServiceProviderCompletedEventHandler(object sender, GetServicesForServiceProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServicesForServiceProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServicesForServiceProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServicesForServiceProvider2CompletedEventHandler(object sender, GetServicesForServiceProvider2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServicesForServiceProvider2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServicesForServiceProvider2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServicesIncludedInContentAgreementCompletedEventHandler(object sender, GetServicesIncludedInContentAgreementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServicesIncludedInContentAgreementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServicesIncludedInContentAgreementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateServiceViewElementCompletedEventHandler(object sender, UpdateServiceViewElementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateServiceViewElementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateServiceViewElementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateServiceViewCompletedEventHandler(object sender, UpdateServiceViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateServiceViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateServiceViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateServiceCompletedEventHandler(object sender, UpdateServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServiceForIdCompletedEventHandler(object sender, GetServiceForIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceForIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceForIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServiceForId2CompletedEventHandler(object sender, GetServiceForId2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceForId2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceForId2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServiceForObjectIdCompletedEventHandler(object sender, GetServiceForObjectIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceForObjectIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceForObjectIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPurchaseInfoCompletedEventHandler(object sender, GetPurchaseInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPurchaseInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPurchaseInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPurchaseStatInfoCompletedEventHandler(object sender, GetPurchaseStatInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPurchaseStatInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPurchaseStatInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetContentUsageStatInfoCompletedEventHandler(object sender, GetContentUsageStatInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContentUsageStatInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContentUsageStatInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRegionForIpCompletedEventHandler(object sender, GetRegionForIpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRegionForIpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRegionForIpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllLanguagesCompletedEventHandler(object sender, GetAllLanguagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllLanguagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllLanguagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddRegionCompletedEventHandler(object sender, AddRegionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateRegionCompletedEventHandler(object sender, UpdateRegionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRegionCompletedEventHandler(object sender, GetRegionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteRegionCompletedEventHandler(object sender, DeleteRegionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllRegionsCompletedEventHandler(object sender, GetAllRegionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllRegionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllRegionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetSingleContentServicePriceCompletedEventHandler(object sender, SetSingleContentServicePriceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSingleContentServicePriceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSingleContentServicePriceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetSingleContentServicePrice2CompletedEventHandler(object sender, SetSingleContentServicePrice2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSingleContentServicePrice2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSingleContentServicePrice2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExcludeContentFromServicePriceCompletedEventHandler(object sender, ExcludeContentFromServicePriceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExcludeContentFromServicePriceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExcludeContentFromServicePriceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateServicePriceCompletedEventHandler(object sender, CreateServicePriceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateServicePriceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateServicePriceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateServicePriceCompletedEventHandler(object sender, UpdateServicePriceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateServicePriceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateServicePriceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteServicePriceCompletedEventHandler(object sender, DeleteServicePriceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteServicePriceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteServicePriceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCategoryInfoWithAllContentAndChannelsCompletedEventHandler(object sender, GetCategoryInfoWithAllContentAndChannelsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCategoryInfoWithAllContentAndChannelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCategoryInfoWithAllContentAndChannelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServiceCategoryInfoCompletedEventHandler(object sender, GetServiceCategoryInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceCategoryInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceCategoryInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigCompletedEventHandler(object sender, GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceCategoryInfoIgnoringShowEmptyCategoriesConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetContentForServiceAgreementCompletedEventHandler(object sender, GetContentForServiceAgreementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContentForServiceAgreementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContentForServiceAgreementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetContentAndServiceForCategoryCompletedEventHandler(object sender, GetContentAndServiceForCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContentAndServiceForCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContentAndServiceForCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SearchContentForServiceAgreementCompletedEventHandler(object sender, SearchContentForServiceAgreementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchContentForServiceAgreementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchContentForServiceAgreementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMultipleServicePriceCompletedEventHandler(object sender, GetMultipleServicePriceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMultipleServicePriceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMultipleServicePriceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMultipleServicePriceByPriceIDCompletedEventHandler(object sender, GetMultipleServicePriceByPriceIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMultipleServicePriceByPriceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMultipleServicePriceByPriceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServiceAgreementInfoCompletedEventHandler(object sender, GetServiceAgreementInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceAgreementInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceAgreementInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ServiceNameExistsCompletedEventHandler(object sender, ServiceNameExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceNameExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServiceNameExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEventsFromSinkCompletedEventHandler(object sender, GetEventsFromSinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEventsFromSinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEventsFromSinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEventsOfTypeCompletedEventHandler(object sender, GetEventsOfTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEventsOfTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEventsOfTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdatePurchaseValidityTimeCompletedEventHandler(object sender, UpdatePurchaseValidityTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePurchaseValidityTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePurchaseValidityTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591